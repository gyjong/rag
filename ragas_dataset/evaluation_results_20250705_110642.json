{
  "timestamp": "2025-07-05T11:06:42.392921",
  "evaluation_metrics": [
    "answer_relevancy",
    "faithfulness",
    "context_recall",
    "context_precision"
  ],
  "results": {
    "Naive RAG": {
      "detailed_scores": {
        "user_input": {
          "0": "RAG의 한계는 무엇인가요?"
        },
        "retrieved_contexts": {
          "0": [
            "특징 검색 단계의 정교한 처리를 통해 검색 정확도와 효율성을 향상시키지만, 여전히 복잡한 실제 응용 요구 사항을 충족하는 데 한계가 있습니다. \n한계 \n ● 고정적인 파이프라인 (Rigid Pipeline): 고급 RAG는 검색 전략을 향상 시켰지만, 전체적인 프로세스 구조는 여전히 고정된 방식을 유지하고 있습니다. 즉, 개별 검색 단계는 정교해졌지만 전체 시스템이 모듈화되지 않았으며, 유연하게 적응할 수 있는 구조가 부족합니다. ● 제한적인 동적 적응 (Limited Dynamic Adaptation): 고급 RAG는 검색 효율성을 높였지만, 반복적인 개선(iterative refinement)이나 다중 경로(multi-path) 처리를 완전히 지원하지 못합니다. 대부분의 질의 처리는 사전 정의된 방식에 따라 이루어져, 실시간으로 조정하거나 변화하는 정보 요구사항에 맞춰 즉각적으로 적응하기 어렵습니다.\n● 복잡한 사용자 맞춤 설정 (Complex Customization): 고급 RAG는 재랭킹 및 질의 변환 등의 개선된 기능을 제공하지만, 설정이 여전히 복잡하며, 개발자가 다양한 매개변수를 수동으로 조정해야 합니다. 또한, 모듈형 설계가 부족하여 시스템을 다시 구성하는 것이 어렵고 시간이 많이 소요됩니다.  \n2.4 Modular RAG (모듈형 RAG) 핵심 개념 Modular RAG는 기존 RAG의 한계를 극복하기 위해 개발된 유연하고 확장 가능한 프레임워크로, 독립적인 모듈과 특수 연산자로 구성된 구조를 통해 검색과 응답 생성의 제어력, 확장성, 효율성을 극대화합니다. 기존의 고정된 검색-생성 선형 파이프라인에서 벗어나, 라우팅, 스케줄링, 융합 메커니즘을 통합하는 고급 설계를 적용하여 보다 재구성이 용이한 시스템을 제공합니다.",
            "• 설계 난이도 및 초기 부담: 모듈을 다수 포함하다보니 워크플로 조정 등 시스템 설계가 어렵고 복잡합니다 arxiv.org . 구성요소 사이 인터페이스를 맞추고 전체 파이프라인을 조율해야 하므로 초기 개발 노력이 많이 들며, 최적화되지 않으면 모듈 간 통신 오버헤드로 응답 지연이 커질 수 있습니다. 또한 체계가 유연한 만큼 표준화된 구성보다는 사례별 맞춤 개발이 필요해 구현 난도가 높습니다. 다만 잘 구축하면 이러한 복잡성을 상쇄할 만큼의 성능과 유연성 이점을 얻을 수 있습니다.\n구분 Naive RAG Advanced RAG Modular RAG \n개념 기본 검색 및 생성 방식 최적화된 검색 및 후처리 적용 모듈화된 검색 및 생성 구조 \n검색 방식 단순 벡터 검색 하이브리드 검색(키워드+시맨틱) 다중 데이터 소스 및 적응형 검색 \n응답 생성 검색된 문서를 그대로 사용 필터링 및 요약 후 생성 최적화된 모듈 기반 응답 생성 \n정확성 검색 품질에 크게 의존 검색 후처리로 정확성 향상 정밀한 필터링 및 다중 데이터 활용 유연성 및 확장성 고정된 검색-생성 구조 제한적인 조정 가능 동적 워크플로우 및 확장 가능한 모듈 구조 \n적용 가능 분야 간단한 FAQ, 문서 검색 법률, 금융, 의료 도메인 적용 가능 실시간 데이터 활용 및 맞춤형 검색 가능 \n장점 ● 단순하고 이해하기 쉬운 기본 접근 방식 \n● Indexing, Pre-Retrieval, Post-Retrieval 등 고급 검색 기법을 도입하여 Naive RAG 보다 개선된 성능 \n● 모듈화된 아키텍처로 독립적인 관리가 가능 ● 양방향 프로세스로 조건부 처리, 사용자 개입 등 높은 유연성과 확장성을 제공 \n한계점 \n● 유사도 계산으로 인해 쿼리 이해도가 낮음 ● 검색 노이즈로 인해 불필요한 정보가 들어가게 됨 ● 고정된 선형 워크플로우로 인해 이전 결과를 수정할 수 없음 \n● 고정된 파이프라인 구조로 확장성 부족 ● 여전히 단방향 프로세스라는 구조적 한계를 내포 \n● 초기 설계 복잡 ● 유지보수 부담",
            "- Beyond the Training Set: Empowering LLMs to Seek Knowledge https://blog.boxcars.ai/p/beyond-the-training-set-empowering  - Evolution of RAGs: Naive RAG, Advanced RAG, and Modular RAG Architectures https://www.marktechpost.com/2024/04/01/evolution-of-rags-naive-rag-advanced-rag-and-modular-rag-architectures/  - Agentic Retrieval-Augmented Generation: A Survey on Agentic RAG https://arxiv.org/html/2501.09136v1   2번파트 - Modular RAG: Transforming RAG Systems into LEGO-like Reconfigurable Frameworks https://arxiv.org/pdf/2407.21059 - LLM RAG Paradigms: Naive RAG, Advanced RAG & Modular RAG https://medium.com/@drjulija/what-are-naive-rag-advanced-rag-modular-rag-paradigms-edff410c202e 3번 파트 - LLM RAG Paradigms: Naive RAG, Advanced RAG & Modular RAG https://medium.com/@drjulija/what-are-naive-rag-advanced-rag-modular-rag-paradigms-edff410c202e  - Retrieval-Augmented Generation for Large Language Models: A Survey https://arxiv.org/pdf/2312.10997v5 5번 파트",
            "2.4 주요 RAG 방법론 적용을 위한 비교 각 RAG 방법론은 특정 상황과 목적에 따라 장점과 한계가 다르므로, 적절한 방법론을 선택하고 적용하는 것이 중요합니다. Naive RAG는 가장 단순한 구조로 빠르게 구현할 수 있지만, 검색 노이즈와 정확도 문제를 가지고 있습니다. Advanced RAG는 검색 최적화 기술을 도입하여 정확도를 높이지만 여전히 고정된 워크플로우를 따릅니다. 반면, Modular RAG는 독립적인 모듈 기반 설계를 통해 유연성과 확장성을 극대화할 수 있어 다양한 조건에 맞춰 최적화가 가능합니다.  옵션 1.) 간단한 장단점 비교 RAG 유형 장점 단점 Naive RAG - 단순하고 이해하기 쉬운 기본 접근 방식 - 유사도 계산으로 인해 쿼리 이해도가 낮음 - 검색 노이즈로 인해 불필요한 정보가 들어가게 됨 - 고정된 선형 워크플로우로 인해 이전 결과를 수정할 수 없음\nAdvanced RAG - Indexing, Pre-Retrieval, Post-Retrieval 등 고급 검색 기법을 도입하여 Naive RAG 의 한계를 개선 - Naive RAG 와 같이, 여전히 단방향 프로세스라는 구조적 한계를 내포 \nModular RAG - 모듈화된 아키텍처로 독립적인 관리가 가능 - 양방향 프로세스로 조건부 처리, 사용자 개입 등 높은 유연성과 확장성을 제공 \n- 초기 설계 시 구현 복잡성이 높음 \n 옵션 2.) 상세 비교 비교 기준 Naive RAG Advanced RAG Modular RAG 검색 방식 (Search Method) • 단순 벡터 유사도 검색: 사용자의 질의를 임베딩으로 변환한 뒤 벡터 DB 등에서 유사도가 가장 높은 문서 조각들을 Top-N으로 검색합니다 ibm.com . 일반적으로 한 번의 질의로 얻은 결과만 사용하며, 키워드 매칭이나 임베딩 기반 검색 중 하나의 기법에 주로 의존합니다.",
            "한계 GraphRAG는 여러 분야에서 활용될 수 있지만, 그래프 구성, 검색, 구성, 생성 등 각 구성 요소와 시스템 전체의 효율성, 확장성, 신뢰성 측면에서 해결해야 할 과제들이 남아 있습니다. ● 그래프 구성: 작업에 맞는 그래프 구조 결정, 다양한 형식의 그래프 표현 방식 고려, 멀티모달 데이터 통합 문제 해결. ● 검색: 쿼리와 관련된 정보 검색, 검색 깊이 조정, 지식 충돌 해결. ● 구성: 그래프 크기 축소 및 노이즈 제거, 외부 지식을 이용한 그래프 보강. ● 생성: 그래프 구조 정보를 효과적으로 활용, 과학 그래프에서 정확한 구조 생성. ● 시스템 통합: 구성 요소 간의 원활한 상호 작용 보장 및 전체 시스템 최적화. ● 확장성: 데이터 증가에 따른 시스템 성능 유지. ● 신뢰성: ○ 개인 정보 보호: 민감한 데이터 보호를 위한 개인 정보 보호 기술 필요. ○ 설명 가능성: 추론 과정을 명확하게 설명하여 시스템에 대한 신뢰도 향상 . ● 평가: 구성 요소별 성능 평가, 종단 간 벤치마크, 작업 및 도메인별 평가, 신뢰성 벤치마크 필요. ● 새로운 응용 분야: 다양한 도메인에 GraphRAG를 적용하기 위한 맞춤형 전략 개발.  \n5.3 실제 기업 적용 사례(LinkedIn)   LinkedIn은 고객 서비스 기술 지원을 개선하기 위해 Knowledge Graph와 RAG(Retrieval-Augmented Generation)를 통합한 시스템을 개발했습니다. 기존의 벡터 기반 검색 RAG 시스템이 내부 구조와 이슈 간 관계를 무시하여 검색 정확도가 저하되는 문제가 있었습니다. 또한 임베딩 모델의 세분화 프로세스 중 콘텐츠가 단절되어 불완전한 답변이 발생하는 문제도 발생했습니다. 이를 해결하기 위해 Knowledge Graph를 통합한 GraphRAG를 도입하여, 과거 이슈의 구조와 상호 관계를 보존하면서 검색 정확도를 향상시켰습니다."
          ]
        },
        "response": {
          "0": "RAG(Retrieval-Augmented Generation)의 한계는 다음과 같습니다.\n\n*   **검색 노이즈:** RAG는 검색을 통해 정보를 얻지만, 검색 과정에서 발생하는 \"검색 노이즈\" (noise)가 발생할 수 있습니다. 이는 검색 엔진의 오류, 데이터 품질 문제, 또는 검색 과정에서 생성된 정보의 불확실성 등으로 인해 발생합니다.\n*   **정확도 문제:** RAG는 검색된 정보를 바탕으로 응답을 생성하지만, 검색된 정보의 정확도가 낮을 경우 응답의 품질이 저하될 수 있습니다. 특히, RAG 시스템이 제공하는 정보의 신뢰도가 낮을 경우, 응답의 정확도가 떨어질 수 있습니다.\n*   **유연성 부족:** RAG 시스템은 특정 상황에 맞춰 유연하게 조정하기 어렵습니다. 즉, 새로운 정보나 요구사항에 대한 적응력이 부족합니다.\n*   **구조적 한계:** RAG 시스템은 모듈화된 구조를 가지고 있지만, 시스템 전체의 확장성과 유연성을 확보하기에는 한계가 있습니다.\n*   **복잡성:** RAG 시스템의 설계 및 구현이 복잡하며, 초기 개발 비용이 많이 들 수 있습니다.\n*   **데이터 품질 의존성:** RAG 시스템의 성능은 데이터 품질에 크게 의존합니다. 데이터의 품질이 낮으면 RAG 시스템의 응답 품질도 저하될 수 있습니다.\n*   **지식 부족:** RAG 시스템은 학습 데이터에 의존하기 때문에, 학습 데이터가 부족하거나 편향된 경우 응답 품질이 저하될 수 있습니다.\n\n이러한 한계점들을 극복하기 위해 연구자들은 다양한 기술적 접근 방식을 개발하고 있으며, RAG 시스템의 성능과 확장성을 향상시키기 위한 노력을 지속하고 있습니다."
        },
        "reference": {
          "0": "RAG는 검색된 문서의 품질에 따라 답변의 정확성이 크게 좌우되며, 관련 없는 정보가 검색되면 환각(Hallucination) 현상이 발생할 수 있습니다. 또한, 실시간 정보나 최신 데이터를 반영하는 데 한계가 있을 수 있습니다."
        },
        "answer_relevancy": {
          "0": 0.8276160190231052
        },
        "faithfulness": {
          "0": 0.9473684210526315
        },
        "context_recall": {
          "0": 1.0
        },
        "context_precision": {
          "0": 0.99999999998
        }
      },
      "average_scores": {
        "answer_relevancy": 0.8276160190231052,
        "faithfulness": 0.9473684210526315,
        "context_recall": 1.0,
        "context_precision": 0.99999999998
      }
    },
    "Advanced RAG": {
      "detailed_scores": {
        "user_input": {
          "0": "RAG의 한계는 무엇인가요?"
        },
        "retrieved_contexts": {
          "0": [
            "Contents 1. Introduction 2. RAG(Retrieval-Augmented Generation)란? 2.1 RAG의 발전 방향 2.2 Naive RAG 핵심 구성 요소 2.3 Advanced RAG 핵심 개선 사항 2.4 Modular RAG (모듈형 RAG) 핵심 개념 3. Modular RAG의 주요 구성 요소 3.1 Agent 기반의 아키텍처 3.2 모듈 3.3 서브모듈 3.4 연산자 3.5 전체적인 구조 예시 3.6 UseCase: Accuracy Improvement 4. Use-case 4.1 도메인별 최적화 전략 4.2 핵심 개념 정리 4.3 의료 도메인 - AI 기반 진단 및 치료 추천 4.4 법률 도메인 - AI 기반 법률 상담 시스템 (Legal RAG) 4.5 금융 도메인 - AI 기반 투자 보고서 생성 및 시장 분석 4.6 전자상거래 도메인 - RRR 기반 AI 개인화 추천 시스템 5. RAG 최신 패러다임 발전 방향 5.1 GraphRAG 배경 5.2 GraphRAG란 무엇인가? 5.3 실제 기업 적용 사례(LinkedIn) 6. Conclusion",
            "특징 검색 단계의 정교한 처리를 통해 검색 정확도와 효율성을 향상시키지만, 여전히 복잡한 실제 응용 요구 사항을 충족하는 데 한계가 있습니다. \n한계 \n ● 고정적인 파이프라인 (Rigid Pipeline): 고급 RAG는 검색 전략을 향상 시켰지만, 전체적인 프로세스 구조는 여전히 고정된 방식을 유지하고 있습니다. 즉, 개별 검색 단계는 정교해졌지만 전체 시스템이 모듈화되지 않았으며, 유연하게 적응할 수 있는 구조가 부족합니다. ● 제한적인 동적 적응 (Limited Dynamic Adaptation): 고급 RAG는 검색 효율성을 높였지만, 반복적인 개선(iterative refinement)이나 다중 경로(multi-path) 처리를 완전히 지원하지 못합니다. 대부분의 질의 처리는 사전 정의된 방식에 따라 이루어져, 실시간으로 조정하거나 변화하는 정보 요구사항에 맞춰 즉각적으로 적응하기 어렵습니다.\n● 복잡한 사용자 맞춤 설정 (Complex Customization): 고급 RAG는 재랭킹 및 질의 변환 등의 개선된 기능을 제공하지만, 설정이 여전히 복잡하며, 개발자가 다양한 매개변수를 수동으로 조정해야 합니다. 또한, 모듈형 설계가 부족하여 시스템을 다시 구성하는 것이 어렵고 시간이 많이 소요됩니다.  \n2.4 Modular RAG (모듈형 RAG) 핵심 개념 Modular RAG는 기존 RAG의 한계를 극복하기 위해 개발된 유연하고 확장 가능한 프레임워크로, 독립적인 모듈과 특수 연산자로 구성된 구조를 통해 검색과 응답 생성의 제어력, 확장성, 효율성을 극대화합니다. 기존의 고정된 검색-생성 선형 파이프라인에서 벗어나, 라우팅, 스케줄링, 융합 메커니즘을 통합하는 고급 설계를 적용하여 보다 재구성이 용이한 시스템을 제공합니다.",
            "2.1 RAG의 발전 방향 \n RAG에는 대표적으로 Naive RAG, Advanced RAG,  Modular RAG 3가지 방법론이 있으며, 각 방법론의 한계를 극복하기 위해 Naive RAG → Advanced RAG → Modular RAG로 발전하면서 점진적으로 성능과 유연성을 향상시켜 왔습니다.\n2.2 Naive RAG 핵심 구성 요소 Naive RAG는 색인(indexing), 검색(retrieval), 생성(generation)의 세 가지 핵심 요소로 구성된 기본적인 프레임워크입니다. 작동 방식 문서들을 작은 덩어리(chunk)로 분할하고 임베딩 모델을 사용하여 벡터 형태로 변환하여 벡터 데이터베이스에 저장합니다. 사용자 쿼리를 임베딩 모델을 사용하여 벡터로 변환하고, 벡터 데이터베이스에서 쿼리와 가장 유사한 상위 k개의 문서 덩어리를 검색합니다. 검색된 문서 덩어리와 사용자 쿼리를 LLM에 함께 입력하여 최종 답변을 생성합니다. \n특징 단순한 유사도 계산에 기반한 검색 방식으로, 복잡한 시나리오에 적용하기 어렵습니다. \n한계 \n ● 얕은 질의 이해 (Shallow Query Understanding):  Naive RAG는 키워드 또는 벡터 기반의 유사성 매칭을 주로 사용하므로, 질의를 깊이 이해하지 못하는 경우가 많습니다. 다의적(ambiguous) 질의, 복합적인 질문, 또는 문맥이 중요한 요청을 처리하는 데 어려움을 겪으며, 그 결과 관련성이 낮거나 불완전한 검색 결과를 반환할 가능성이 높습니다. ● 검색 노이즈 (Retrieval Noise):  Naive RAG는 단순한 유사성 측정을 바탕으로 문서를 선택하기 때문에, 과도하거나 불필요한 정보까지 검색하는 경우가 많습니다.검색된 정보가 너무 많아지면 모델의 문맥 창(context window)이"
          ]
        },
        "response": {
          "0": "RAG의 한계는 다음과 같이 요약할 수 있습니다.\n\n*   **고정된 파이프라인:** 기존 RAG는 검색 전략을 개선했지만, 전체적인 프로세스 구조가 여전히 고정되어 있습니다. 즉, 개별 검색 단계는 정교해졌지만, 전체 시스템이 모듈화되지 않았으며, 유연하게 적응할 수 있는 구조가 부족합니다.\n*   **제한적인 동적 적응:** 고급 RAG는 검색 효율성을 높였지만, 반복적인 개선(iterative refinement)이나 다중 경로 처리를 완전히 지원하지 못합니다. 대부분의 질의 처리는 사전 정의된 방식에 따라 이루어져, 실시간으로 조정하거나 변화하는 정보 요구사항에 맞춰 즉각적으로 적응하기 어렵습니다.\n*   **복잡한 사용자 맞춤 설정:** 고급 RAG는 재랭킹 및 질의 변환 등의 개선된 기능을 제공하지만, 설정이 여전히 복잡하며, 개발자가 다양한 매개변수를 수동으로 조정해야 합니다. 또한, 모듈형 설계가 부족하여 시스템을 다시 구성하는 것이 어렵고 시간이 많이 소요됩니다.\n\n**핵심적으로, RAG는 아직까지는 초기 단계에 있으며, 다음과 같은 측면에서 한계점을 가지고 있습니다.**\n\n*   **질의 이해의 한계:** 단순한 유사도 계산에 기반한 검색 방식은 질의를 깊이 이해하지 못하고, 다의적 질의, 복합적인 질문, 문맥 정보 등을 제대로 처리하지 못합니다.\n*   **검색 노이즈:** 검색된 정보가 너무 많아지면 모델의 문맥 창(context window)이 제한되어, 중요한 정보를 놓칠 수 있습니다.\n\n이러한 한계점을 극복하기 위해 RAG는 지속적인 연구 개발이 필요합니다."
        },
        "reference": {
          "0": "RAG는 검색된 문서의 품질에 따라 답변의 정확성이 크게 좌우되며, 관련 없는 정보가 검색되면 환각(Hallucination) 현상이 발생할 수 있습니다. 또한, 실시간 정보나 최신 데이터를 반영하는 데 한계가 있을 수 있습니다."
        },
        "answer_relevancy": {
          "0": 0.8735530155148373
        },
        "faithfulness": {
          "0": 0.9411764705882353
        },
        "context_recall": {
          "0": 1.0
        },
        "context_precision": {
          "0": 0.9999999999666667
        }
      },
      "average_scores": {
        "answer_relevancy": 0.8735530155148373,
        "faithfulness": 0.9411764705882353,
        "context_recall": 1.0,
        "context_precision": 0.9999999999666667
      }
    },
    "Modular RAG": {
      "detailed_scores": {
        "user_input": {
          "0": "RAG의 한계는 무엇인가요?"
        },
        "retrieved_contexts": {
          "0": [
            "특징 검색 단계의 정교한 처리를 통해 검색 정확도와 효율성을 향상시키지만, 여전히 복잡한 실제 응용 요구 사항을 충족하는 데 한계가 있습니다. \n한계 \n ● 고정적인 파이프라인 (Rigid Pipeline): 고급 RAG는 검색 전략을 향상 시켰지만, 전체적인 프로세스 구조는 여전히 고정된 방식을 유지하고 있습니다. 즉, 개별 검색 단계는 정교해졌지만 전체 시스템이 모듈화되지 않았으며, 유연하게 적응할 수 있는 구조가 부족합니다. ● 제한적인 동적 적응 (Limited Dynamic Adaptation): 고급 RAG는 검색 효율성을 높였지만, 반복적인 개선(iterative refinement)이나 다중 경로(multi-path) 처리를 완전히 지원하지 못합니다. 대부분의 질의 처리는 사전 정의된 방식에 따라 이루어져, 실시간으로 조정하거나 변화하는 정보 요구사항에 맞춰 즉각적으로 적응하기 어렵습니다.\n● 복잡한 사용자 맞춤 설정 (Complex Customization): 고급 RAG는 재랭킹 및 질의 변환 등의 개선된 기능을 제공하지만, 설정이 여전히 복잡하며, 개발자가 다양한 매개변수를 수동으로 조정해야 합니다. 또한, 모듈형 설계가 부족하여 시스템을 다시 구성하는 것이 어렵고 시간이 많이 소요됩니다.  \n2.4 Modular RAG (모듈형 RAG) 핵심 개념 Modular RAG는 기존 RAG의 한계를 극복하기 위해 개발된 유연하고 확장 가능한 프레임워크로, 독립적인 모듈과 특수 연산자로 구성된 구조를 통해 검색과 응답 생성의 제어력, 확장성, 효율성을 극대화합니다. 기존의 고정된 검색-생성 선형 파이프라인에서 벗어나, 라우팅, 스케줄링, 융합 메커니즘을 통합하는 고급 설계를 적용하여 보다 재구성이 용이한 시스템을 제공합니다.",
            "• 설계 난이도 및 초기 부담: 모듈을 다수 포함하다보니 워크플로 조정 등 시스템 설계가 어렵고 복잡합니다 arxiv.org . 구성요소 사이 인터페이스를 맞추고 전체 파이프라인을 조율해야 하므로 초기 개발 노력이 많이 들며, 최적화되지 않으면 모듈 간 통신 오버헤드로 응답 지연이 커질 수 있습니다. 또한 체계가 유연한 만큼 표준화된 구성보다는 사례별 맞춤 개발이 필요해 구현 난도가 높습니다. 다만 잘 구축하면 이러한 복잡성을 상쇄할 만큼의 성능과 유연성 이점을 얻을 수 있습니다.\n구분 Naive RAG Advanced RAG Modular RAG \n개념 기본 검색 및 생성 방식 최적화된 검색 및 후처리 적용 모듈화된 검색 및 생성 구조 \n검색 방식 단순 벡터 검색 하이브리드 검색(키워드+시맨틱) 다중 데이터 소스 및 적응형 검색 \n응답 생성 검색된 문서를 그대로 사용 필터링 및 요약 후 생성 최적화된 모듈 기반 응답 생성 \n정확성 검색 품질에 크게 의존 검색 후처리로 정확성 향상 정밀한 필터링 및 다중 데이터 활용 유연성 및 확장성 고정된 검색-생성 구조 제한적인 조정 가능 동적 워크플로우 및 확장 가능한 모듈 구조 \n적용 가능 분야 간단한 FAQ, 문서 검색 법률, 금융, 의료 도메인 적용 가능 실시간 데이터 활용 및 맞춤형 검색 가능 \n장점 ● 단순하고 이해하기 쉬운 기본 접근 방식 \n● Indexing, Pre-Retrieval, Post-Retrieval 등 고급 검색 기법을 도입하여 Naive RAG 보다 개선된 성능 \n● 모듈화된 아키텍처로 독립적인 관리가 가능 ● 양방향 프로세스로 조건부 처리, 사용자 개입 등 높은 유연성과 확장성을 제공 \n한계점 \n● 유사도 계산으로 인해 쿼리 이해도가 낮음 ● 검색 노이즈로 인해 불필요한 정보가 들어가게 됨 ● 고정된 선형 워크플로우로 인해 이전 결과를 수정할 수 없음 \n● 고정된 파이프라인 구조로 확장성 부족 ● 여전히 단방향 프로세스라는 구조적 한계를 내포 \n● 초기 설계 복잡 ● 유지보수 부담",
            "- Beyond the Training Set: Empowering LLMs to Seek Knowledge https://blog.boxcars.ai/p/beyond-the-training-set-empowering  - Evolution of RAGs: Naive RAG, Advanced RAG, and Modular RAG Architectures https://www.marktechpost.com/2024/04/01/evolution-of-rags-naive-rag-advanced-rag-and-modular-rag-architectures/  - Agentic Retrieval-Augmented Generation: A Survey on Agentic RAG https://arxiv.org/html/2501.09136v1   2번파트 - Modular RAG: Transforming RAG Systems into LEGO-like Reconfigurable Frameworks https://arxiv.org/pdf/2407.21059 - LLM RAG Paradigms: Naive RAG, Advanced RAG & Modular RAG https://medium.com/@drjulija/what-are-naive-rag-advanced-rag-modular-rag-paradigms-edff410c202e 3번 파트 - LLM RAG Paradigms: Naive RAG, Advanced RAG & Modular RAG https://medium.com/@drjulija/what-are-naive-rag-advanced-rag-modular-rag-paradigms-edff410c202e  - Retrieval-Augmented Generation for Large Language Models: A Survey https://arxiv.org/pdf/2312.10997v5 5번 파트",
            "2.4 주요 RAG 방법론 적용을 위한 비교 각 RAG 방법론은 특정 상황과 목적에 따라 장점과 한계가 다르므로, 적절한 방법론을 선택하고 적용하는 것이 중요합니다. Naive RAG는 가장 단순한 구조로 빠르게 구현할 수 있지만, 검색 노이즈와 정확도 문제를 가지고 있습니다. Advanced RAG는 검색 최적화 기술을 도입하여 정확도를 높이지만 여전히 고정된 워크플로우를 따릅니다. 반면, Modular RAG는 독립적인 모듈 기반 설계를 통해 유연성과 확장성을 극대화할 수 있어 다양한 조건에 맞춰 최적화가 가능합니다.  옵션 1.) 간단한 장단점 비교 RAG 유형 장점 단점 Naive RAG - 단순하고 이해하기 쉬운 기본 접근 방식 - 유사도 계산으로 인해 쿼리 이해도가 낮음 - 검색 노이즈로 인해 불필요한 정보가 들어가게 됨 - 고정된 선형 워크플로우로 인해 이전 결과를 수정할 수 없음\nAdvanced RAG - Indexing, Pre-Retrieval, Post-Retrieval 등 고급 검색 기법을 도입하여 Naive RAG 의 한계를 개선 - Naive RAG 와 같이, 여전히 단방향 프로세스라는 구조적 한계를 내포 \nModular RAG - 모듈화된 아키텍처로 독립적인 관리가 가능 - 양방향 프로세스로 조건부 처리, 사용자 개입 등 높은 유연성과 확장성을 제공 \n- 초기 설계 시 구현 복잡성이 높음 \n 옵션 2.) 상세 비교 비교 기준 Naive RAG Advanced RAG Modular RAG 검색 방식 (Search Method) • 단순 벡터 유사도 검색: 사용자의 질의를 임베딩으로 변환한 뒤 벡터 DB 등에서 유사도가 가장 높은 문서 조각들을 Top-N으로 검색합니다 ibm.com . 일반적으로 한 번의 질의로 얻은 결과만 사용하며, 키워드 매칭이나 임베딩 기반 검색 중 하나의 기법에 주로 의존합니다.",
            "한계 GraphRAG는 여러 분야에서 활용될 수 있지만, 그래프 구성, 검색, 구성, 생성 등 각 구성 요소와 시스템 전체의 효율성, 확장성, 신뢰성 측면에서 해결해야 할 과제들이 남아 있습니다. ● 그래프 구성: 작업에 맞는 그래프 구조 결정, 다양한 형식의 그래프 표현 방식 고려, 멀티모달 데이터 통합 문제 해결. ● 검색: 쿼리와 관련된 정보 검색, 검색 깊이 조정, 지식 충돌 해결. ● 구성: 그래프 크기 축소 및 노이즈 제거, 외부 지식을 이용한 그래프 보강. ● 생성: 그래프 구조 정보를 효과적으로 활용, 과학 그래프에서 정확한 구조 생성. ● 시스템 통합: 구성 요소 간의 원활한 상호 작용 보장 및 전체 시스템 최적화. ● 확장성: 데이터 증가에 따른 시스템 성능 유지. ● 신뢰성: ○ 개인 정보 보호: 민감한 데이터 보호를 위한 개인 정보 보호 기술 필요. ○ 설명 가능성: 추론 과정을 명확하게 설명하여 시스템에 대한 신뢰도 향상 . ● 평가: 구성 요소별 성능 평가, 종단 간 벤치마크, 작업 및 도메인별 평가, 신뢰성 벤치마크 필요. ● 새로운 응용 분야: 다양한 도메인에 GraphRAG를 적용하기 위한 맞춤형 전략 개발.  \n5.3 실제 기업 적용 사례(LinkedIn)   LinkedIn은 고객 서비스 기술 지원을 개선하기 위해 Knowledge Graph와 RAG(Retrieval-Augmented Generation)를 통합한 시스템을 개발했습니다. 기존의 벡터 기반 검색 RAG 시스템이 내부 구조와 이슈 간 관계를 무시하여 검색 정확도가 저하되는 문제가 있었습니다. 또한 임베딩 모델의 세분화 프로세스 중 콘텐츠가 단절되어 불완전한 답변이 발생하는 문제도 발생했습니다. 이를 해결하기 위해 Knowledge Graph를 통합한 GraphRAG를 도입하여, 과거 이슈의 구조와 상호 관계를 보존하면서 검색 정확도를 향상시켰습니다.",
            "특징 검색 단계의 정교한 처리를 통해 검색 정확도와 효율성을 향상시키지만, 여전히 복잡한 실제 응용 요구 사항을 충족하는 데 한계가 있습니다. \n한계 \n ● 고정적인 파이프라인 (Rigid Pipeline): 고급 RAG는 검색 전략을 향상 시켰지만, 전체적인 프로세스 구조는 여전히 고정된 방식을 유지하고 있습니다. 즉, 개별 검색 단계는 정교해졌지만 전체 시스템이 모듈화되지 않았으며, 유연하게 적응할 수 있는 구조가 부족합니다. ● 제한적인 동적 적응 (Limited Dynamic Adaptation): 고급 RAG는 검색 효율성을 높였지만, 반복적인 개선(iterative refinement)이나 다중 경로(multi-path) 처리를 완전히 지원하지 못합니다. 대부분의 질의 처리는 사전 정의된 방식에 따라 이루어져, 실시간으로 조정하거나 변화하는 정보 요구사항에 맞춰 즉각적으로 적응하기 어렵습니다.\n● 복잡한 사용자 맞춤 설정 (Complex Customization): 고급 RAG는 재랭킹 및 질의 변환 등의 개선된 기능을 제공하지만, 설정이 여전히 복잡하며, 개발자가 다양한 매개변수를 수동으로 조정해야 합니다. 또한, 모듈형 설계가 부족하여 시스템을 다시 구성하는 것이 어렵고 시간이 많이 소요됩니다.  \n2.4 Modular RAG (모듈형 RAG) 핵심 개념 Modular RAG는 기존 RAG의 한계를 극복하기 위해 개발된 유연하고 확장 가능한 프레임워크로, 독립적인 모듈과 특수 연산자로 구성된 구조를 통해 검색과 응답 생성의 제어력, 확장성, 효율성을 극대화합니다. 기존의 고정된 검색-생성 선형 파이프라인에서 벗어나, 라우팅, 스케줄링, 융합 메커니즘을 통합하는 고급 설계를 적용하여 보다 재구성이 용이한 시스템을 제공합니다.",
            "• 설계 난이도 및 초기 부담: 모듈을 다수 포함하다보니 워크플로 조정 등 시스템 설계가 어렵고 복잡합니다 arxiv.org . 구성요소 사이 인터페이스를 맞추고 전체 파이프라인을 조율해야 하므로 초기 개발 노력이 많이 들며, 최적화되지 않으면 모듈 간 통신 오버헤드로 응답 지연이 커질 수 있습니다. 또한 체계가 유연한 만큼 표준화된 구성보다는 사례별 맞춤 개발이 필요해 구현 난도가 높습니다. 다만 잘 구축하면 이러한 복잡성을 상쇄할 만큼의 성능과 유연성 이점을 얻을 수 있습니다.\n구분 Naive RAG Advanced RAG Modular RAG \n개념 기본 검색 및 생성 방식 최적화된 검색 및 후처리 적용 모듈화된 검색 및 생성 구조 \n검색 방식 단순 벡터 검색 하이브리드 검색(키워드+시맨틱) 다중 데이터 소스 및 적응형 검색 \n응답 생성 검색된 문서를 그대로 사용 필터링 및 요약 후 생성 최적화된 모듈 기반 응답 생성 \n정확성 검색 품질에 크게 의존 검색 후처리로 정확성 향상 정밀한 필터링 및 다중 데이터 활용 유연성 및 확장성 고정된 검색-생성 구조 제한적인 조정 가능 동적 워크플로우 및 확장 가능한 모듈 구조 \n적용 가능 분야 간단한 FAQ, 문서 검색 법률, 금융, 의료 도메인 적용 가능 실시간 데이터 활용 및 맞춤형 검색 가능 \n장점 ● 단순하고 이해하기 쉬운 기본 접근 방식 \n● Indexing, Pre-Retrieval, Post-Retrieval 등 고급 검색 기법을 도입하여 Naive RAG 보다 개선된 성능 \n● 모듈화된 아키텍처로 독립적인 관리가 가능 ● 양방향 프로세스로 조건부 처리, 사용자 개입 등 높은 유연성과 확장성을 제공 \n한계점 \n● 유사도 계산으로 인해 쿼리 이해도가 낮음 ● 검색 노이즈로 인해 불필요한 정보가 들어가게 됨 ● 고정된 선형 워크플로우로 인해 이전 결과를 수정할 수 없음 \n● 고정된 파이프라인 구조로 확장성 부족 ● 여전히 단방향 프로세스라는 구조적 한계를 내포 \n● 초기 설계 복잡 ● 유지보수 부담",
            "- Beyond the Training Set: Empowering LLMs to Seek Knowledge https://blog.boxcars.ai/p/beyond-the-training-set-empowering  - Evolution of RAGs: Naive RAG, Advanced RAG, and Modular RAG Architectures https://www.marktechpost.com/2024/04/01/evolution-of-rags-naive-rag-advanced-rag-and-modular-rag-architectures/  - Agentic Retrieval-Augmented Generation: A Survey on Agentic RAG https://arxiv.org/html/2501.09136v1   2번파트 - Modular RAG: Transforming RAG Systems into LEGO-like Reconfigurable Frameworks https://arxiv.org/pdf/2407.21059 - LLM RAG Paradigms: Naive RAG, Advanced RAG & Modular RAG https://medium.com/@drjulija/what-are-naive-rag-advanced-rag-modular-rag-paradigms-edff410c202e 3번 파트 - LLM RAG Paradigms: Naive RAG, Advanced RAG & Modular RAG https://medium.com/@drjulija/what-are-naive-rag-advanced-rag-modular-rag-paradigms-edff410c202e  - Retrieval-Augmented Generation for Large Language Models: A Survey https://arxiv.org/pdf/2312.10997v5 5번 파트",
            "2.4 주요 RAG 방법론 적용을 위한 비교 각 RAG 방법론은 특정 상황과 목적에 따라 장점과 한계가 다르므로, 적절한 방법론을 선택하고 적용하는 것이 중요합니다. Naive RAG는 가장 단순한 구조로 빠르게 구현할 수 있지만, 검색 노이즈와 정확도 문제를 가지고 있습니다. Advanced RAG는 검색 최적화 기술을 도입하여 정확도를 높이지만 여전히 고정된 워크플로우를 따릅니다. 반면, Modular RAG는 독립적인 모듈 기반 설계를 통해 유연성과 확장성을 극대화할 수 있어 다양한 조건에 맞춰 최적화가 가능합니다.  옵션 1.) 간단한 장단점 비교 RAG 유형 장점 단점 Naive RAG - 단순하고 이해하기 쉬운 기본 접근 방식 - 유사도 계산으로 인해 쿼리 이해도가 낮음 - 검색 노이즈로 인해 불필요한 정보가 들어가게 됨 - 고정된 선형 워크플로우로 인해 이전 결과를 수정할 수 없음\nAdvanced RAG - Indexing, Pre-Retrieval, Post-Retrieval 등 고급 검색 기법을 도입하여 Naive RAG 의 한계를 개선 - Naive RAG 와 같이, 여전히 단방향 프로세스라는 구조적 한계를 내포 \nModular RAG - 모듈화된 아키텍처로 독립적인 관리가 가능 - 양방향 프로세스로 조건부 처리, 사용자 개입 등 높은 유연성과 확장성을 제공 \n- 초기 설계 시 구현 복잡성이 높음 \n 옵션 2.) 상세 비교 비교 기준 Naive RAG Advanced RAG Modular RAG 검색 방식 (Search Method) • 단순 벡터 유사도 검색: 사용자의 질의를 임베딩으로 변환한 뒤 벡터 DB 등에서 유사도가 가장 높은 문서 조각들을 Top-N으로 검색합니다 ibm.com . 일반적으로 한 번의 질의로 얻은 결과만 사용하며, 키워드 매칭이나 임베딩 기반 검색 중 하나의 기법에 주로 의존합니다.",
            "한계 GraphRAG는 여러 분야에서 활용될 수 있지만, 그래프 구성, 검색, 구성, 생성 등 각 구성 요소와 시스템 전체의 효율성, 확장성, 신뢰성 측면에서 해결해야 할 과제들이 남아 있습니다. ● 그래프 구성: 작업에 맞는 그래프 구조 결정, 다양한 형식의 그래프 표현 방식 고려, 멀티모달 데이터 통합 문제 해결. ● 검색: 쿼리와 관련된 정보 검색, 검색 깊이 조정, 지식 충돌 해결. ● 구성: 그래프 크기 축소 및 노이즈 제거, 외부 지식을 이용한 그래프 보강. ● 생성: 그래프 구조 정보를 효과적으로 활용, 과학 그래프에서 정확한 구조 생성. ● 시스템 통합: 구성 요소 간의 원활한 상호 작용 보장 및 전체 시스템 최적화. ● 확장성: 데이터 증가에 따른 시스템 성능 유지. ● 신뢰성: ○ 개인 정보 보호: 민감한 데이터 보호를 위한 개인 정보 보호 기술 필요. ○ 설명 가능성: 추론 과정을 명확하게 설명하여 시스템에 대한 신뢰도 향상 . ● 평가: 구성 요소별 성능 평가, 종단 간 벤치마크, 작업 및 도메인별 평가, 신뢰성 벤치마크 필요. ● 새로운 응용 분야: 다양한 도메인에 GraphRAG를 적용하기 위한 맞춤형 전략 개발.  \n5.3 실제 기업 적용 사례(LinkedIn)   LinkedIn은 고객 서비스 기술 지원을 개선하기 위해 Knowledge Graph와 RAG(Retrieval-Augmented Generation)를 통합한 시스템을 개발했습니다. 기존의 벡터 기반 검색 RAG 시스템이 내부 구조와 이슈 간 관계를 무시하여 검색 정확도가 저하되는 문제가 있었습니다. 또한 임베딩 모델의 세분화 프로세스 중 콘텐츠가 단절되어 불완전한 답변이 발생하는 문제도 발생했습니다. 이를 해결하기 위해 Knowledge Graph를 통합한 GraphRAG를 도입하여, 과거 이슈의 구조와 상호 관계를 보존하면서 검색 정확도를 향상시켰습니다.",
            "특징 검색 단계의 정교한 처리를 통해 검색 정확도와 효율성을 향상시키지만, 여전히 복잡한 실제 응용 요구 사항을 충족하는 데 한계가 있습니다. \n한계 \n ● 고정적인 파이프라인 (Rigid Pipeline): 고급 RAG는 검색 전략을 향상 시켰지만, 전체적인 프로세스 구조는 여전히 고정된 방식을 유지하고 있습니다. 즉, 개별 검색 단계는 정교해졌지만 전체 시스템이 모듈화되지 않았으며, 유연하게 적응할 수 있는 구조가 부족합니다. ● 제한적인 동적 적응 (Limited Dynamic Adaptation): 고급 RAG는 검색 효율성을 높였지만, 반복적인 개선(iterative refinement)이나 다중 경로(multi-path) 처리를 완전히 지원하지 못합니다. 대부분의 질의 처리는 사전 정의된 방식에 따라 이루어져, 실시간으로 조정하거나 변화하는 정보 요구사항에 맞춰 즉각적으로 적응하기 어렵습니다.\n● 복잡한 사용자 맞춤 설정 (Complex Customization): 고급 RAG는 재랭킹 및 질의 변환 등의 개선된 기능을 제공하지만, 설정이 여전히 복잡하며, 개발자가 다양한 매개변수를 수동으로 조정해야 합니다. 또한, 모듈형 설계가 부족하여 시스템을 다시 구성하는 것이 어렵고 시간이 많이 소요됩니다.  \n2.4 Modular RAG (모듈형 RAG) 핵심 개념 Modular RAG는 기존 RAG의 한계를 극복하기 위해 개발된 유연하고 확장 가능한 프레임워크로, 독립적인 모듈과 특수 연산자로 구성된 구조를 통해 검색과 응답 생성의 제어력, 확장성, 효율성을 극대화합니다. 기존의 고정된 검색-생성 선형 파이프라인에서 벗어나, 라우팅, 스케줄링, 융합 메커니즘을 통합하는 고급 설계를 적용하여 보다 재구성이 용이한 시스템을 제공합니다.",
            "• 설계 난이도 및 초기 부담: 모듈을 다수 포함하다보니 워크플로 조정 등 시스템 설계가 어렵고 복잡합니다 arxiv.org . 구성요소 사이 인터페이스를 맞추고 전체 파이프라인을 조율해야 하므로 초기 개발 노력이 많이 들며, 최적화되지 않으면 모듈 간 통신 오버헤드로 응답 지연이 커질 수 있습니다. 또한 체계가 유연한 만큼 표준화된 구성보다는 사례별 맞춤 개발이 필요해 구현 난도가 높습니다. 다만 잘 구축하면 이러한 복잡성을 상쇄할 만큼의 성능과 유연성 이점을 얻을 수 있습니다.\n구분 Naive RAG Advanced RAG Modular RAG \n개념 기본 검색 및 생성 방식 최적화된 검색 및 후처리 적용 모듈화된 검색 및 생성 구조 \n검색 방식 단순 벡터 검색 하이브리드 검색(키워드+시맨틱) 다중 데이터 소스 및 적응형 검색 \n응답 생성 검색된 문서를 그대로 사용 필터링 및 요약 후 생성 최적화된 모듈 기반 응답 생성 \n정확성 검색 품질에 크게 의존 검색 후처리로 정확성 향상 정밀한 필터링 및 다중 데이터 활용 유연성 및 확장성 고정된 검색-생성 구조 제한적인 조정 가능 동적 워크플로우 및 확장 가능한 모듈 구조 \n적용 가능 분야 간단한 FAQ, 문서 검색 법률, 금융, 의료 도메인 적용 가능 실시간 데이터 활용 및 맞춤형 검색 가능 \n장점 ● 단순하고 이해하기 쉬운 기본 접근 방식 \n● Indexing, Pre-Retrieval, Post-Retrieval 등 고급 검색 기법을 도입하여 Naive RAG 보다 개선된 성능 \n● 모듈화된 아키텍처로 독립적인 관리가 가능 ● 양방향 프로세스로 조건부 처리, 사용자 개입 등 높은 유연성과 확장성을 제공 \n한계점 \n● 유사도 계산으로 인해 쿼리 이해도가 낮음 ● 검색 노이즈로 인해 불필요한 정보가 들어가게 됨 ● 고정된 선형 워크플로우로 인해 이전 결과를 수정할 수 없음 \n● 고정된 파이프라인 구조로 확장성 부족 ● 여전히 단방향 프로세스라는 구조적 한계를 내포 \n● 초기 설계 복잡 ● 유지보수 부담",
            "- Beyond the Training Set: Empowering LLMs to Seek Knowledge https://blog.boxcars.ai/p/beyond-the-training-set-empowering  - Evolution of RAGs: Naive RAG, Advanced RAG, and Modular RAG Architectures https://www.marktechpost.com/2024/04/01/evolution-of-rags-naive-rag-advanced-rag-and-modular-rag-architectures/  - Agentic Retrieval-Augmented Generation: A Survey on Agentic RAG https://arxiv.org/html/2501.09136v1   2번파트 - Modular RAG: Transforming RAG Systems into LEGO-like Reconfigurable Frameworks https://arxiv.org/pdf/2407.21059 - LLM RAG Paradigms: Naive RAG, Advanced RAG & Modular RAG https://medium.com/@drjulija/what-are-naive-rag-advanced-rag-modular-rag-paradigms-edff410c202e 3번 파트 - LLM RAG Paradigms: Naive RAG, Advanced RAG & Modular RAG https://medium.com/@drjulija/what-are-naive-rag-advanced-rag-modular-rag-paradigms-edff410c202e  - Retrieval-Augmented Generation for Large Language Models: A Survey https://arxiv.org/pdf/2312.10997v5 5번 파트",
            "2.4 주요 RAG 방법론 적용을 위한 비교 각 RAG 방법론은 특정 상황과 목적에 따라 장점과 한계가 다르므로, 적절한 방법론을 선택하고 적용하는 것이 중요합니다. Naive RAG는 가장 단순한 구조로 빠르게 구현할 수 있지만, 검색 노이즈와 정확도 문제를 가지고 있습니다. Advanced RAG는 검색 최적화 기술을 도입하여 정확도를 높이지만 여전히 고정된 워크플로우를 따릅니다. 반면, Modular RAG는 독립적인 모듈 기반 설계를 통해 유연성과 확장성을 극대화할 수 있어 다양한 조건에 맞춰 최적화가 가능합니다.  옵션 1.) 간단한 장단점 비교 RAG 유형 장점 단점 Naive RAG - 단순하고 이해하기 쉬운 기본 접근 방식 - 유사도 계산으로 인해 쿼리 이해도가 낮음 - 검색 노이즈로 인해 불필요한 정보가 들어가게 됨 - 고정된 선형 워크플로우로 인해 이전 결과를 수정할 수 없음\nAdvanced RAG - Indexing, Pre-Retrieval, Post-Retrieval 등 고급 검색 기법을 도입하여 Naive RAG 의 한계를 개선 - Naive RAG 와 같이, 여전히 단방향 프로세스라는 구조적 한계를 내포 \nModular RAG - 모듈화된 아키텍처로 독립적인 관리가 가능 - 양방향 프로세스로 조건부 처리, 사용자 개입 등 높은 유연성과 확장성을 제공 \n- 초기 설계 시 구현 복잡성이 높음 \n 옵션 2.) 상세 비교 비교 기준 Naive RAG Advanced RAG Modular RAG 검색 방식 (Search Method) • 단순 벡터 유사도 검색: 사용자의 질의를 임베딩으로 변환한 뒤 벡터 DB 등에서 유사도가 가장 높은 문서 조각들을 Top-N으로 검색합니다 ibm.com . 일반적으로 한 번의 질의로 얻은 결과만 사용하며, 키워드 매칭이나 임베딩 기반 검색 중 하나의 기법에 주로 의존합니다.",
            "한계 GraphRAG는 여러 분야에서 활용될 수 있지만, 그래프 구성, 검색, 구성, 생성 등 각 구성 요소와 시스템 전체의 효율성, 확장성, 신뢰성 측면에서 해결해야 할 과제들이 남아 있습니다. ● 그래프 구성: 작업에 맞는 그래프 구조 결정, 다양한 형식의 그래프 표현 방식 고려, 멀티모달 데이터 통합 문제 해결. ● 검색: 쿼리와 관련된 정보 검색, 검색 깊이 조정, 지식 충돌 해결. ● 구성: 그래프 크기 축소 및 노이즈 제거, 외부 지식을 이용한 그래프 보강. ● 생성: 그래프 구조 정보를 효과적으로 활용, 과학 그래프에서 정확한 구조 생성. ● 시스템 통합: 구성 요소 간의 원활한 상호 작용 보장 및 전체 시스템 최적화. ● 확장성: 데이터 증가에 따른 시스템 성능 유지. ● 신뢰성: ○ 개인 정보 보호: 민감한 데이터 보호를 위한 개인 정보 보호 기술 필요. ○ 설명 가능성: 추론 과정을 명확하게 설명하여 시스템에 대한 신뢰도 향상 . ● 평가: 구성 요소별 성능 평가, 종단 간 벤치마크, 작업 및 도메인별 평가, 신뢰성 벤치마크 필요. ● 새로운 응용 분야: 다양한 도메인에 GraphRAG를 적용하기 위한 맞춤형 전략 개발.  \n5.3 실제 기업 적용 사례(LinkedIn)   LinkedIn은 고객 서비스 기술 지원을 개선하기 위해 Knowledge Graph와 RAG(Retrieval-Augmented Generation)를 통합한 시스템을 개발했습니다. 기존의 벡터 기반 검색 RAG 시스템이 내부 구조와 이슈 간 관계를 무시하여 검색 정확도가 저하되는 문제가 있었습니다. 또한 임베딩 모델의 세분화 프로세스 중 콘텐츠가 단절되어 불완전한 답변이 발생하는 문제도 발생했습니다. 이를 해결하기 위해 Knowledge Graph를 통합한 GraphRAG를 도입하여, 과거 이슈의 구조와 상호 관계를 보존하면서 검색 정확도를 향상시켰습니다.",
            "특징 검색 단계의 정교한 처리를 통해 검색 정확도와 효율성을 향상시키지만, 여전히 복잡한 실제 응용 요구 사항을 충족하는 데 한계가 있습니다. \n한계 \n ● 고정적인 파이프라인 (Rigid Pipeline): 고급 RAG는 검색 전략을 향상 시켰지만, 전체적인 프로세스 구조는 여전히 고정된 방식을 유지하고 있습니다. 즉, 개별 검색 단계는 정교해졌지만 전체 시스템이 모듈화되지 않았으며, 유연하게 적응할 수 있는 구조가 부족합니다. ● 제한적인 동적 적응 (Limited Dynamic Adaptation): 고급 RAG는 검색 효율성을 높였지만, 반복적인 개선(iterative refinement)이나 다중 경로(multi-path) 처리를 완전히 지원하지 못합니다. 대부분의 질의 처리는 사전 정의된 방식에 따라 이루어져, 실시간으로 조정하거나 변화하는 정보 요구사항에 맞춰 즉각적으로 적응하기 어렵습니다.\n● 복잡한 사용자 맞춤 설정 (Complex Customization): 고급 RAG는 재랭킹 및 질의 변환 등의 개선된 기능을 제공하지만, 설정이 여전히 복잡하며, 개발자가 다양한 매개변수를 수동으로 조정해야 합니다. 또한, 모듈형 설계가 부족하여 시스템을 다시 구성하는 것이 어렵고 시간이 많이 소요됩니다.  \n2.4 Modular RAG (모듈형 RAG) 핵심 개념 Modular RAG는 기존 RAG의 한계를 극복하기 위해 개발된 유연하고 확장 가능한 프레임워크로, 독립적인 모듈과 특수 연산자로 구성된 구조를 통해 검색과 응답 생성의 제어력, 확장성, 효율성을 극대화합니다. 기존의 고정된 검색-생성 선형 파이프라인에서 벗어나, 라우팅, 스케줄링, 융합 메커니즘을 통합하는 고급 설계를 적용하여 보다 재구성이 용이한 시스템을 제공합니다.",
            "• 설계 난이도 및 초기 부담: 모듈을 다수 포함하다보니 워크플로 조정 등 시스템 설계가 어렵고 복잡합니다 arxiv.org . 구성요소 사이 인터페이스를 맞추고 전체 파이프라인을 조율해야 하므로 초기 개발 노력이 많이 들며, 최적화되지 않으면 모듈 간 통신 오버헤드로 응답 지연이 커질 수 있습니다. 또한 체계가 유연한 만큼 표준화된 구성보다는 사례별 맞춤 개발이 필요해 구현 난도가 높습니다. 다만 잘 구축하면 이러한 복잡성을 상쇄할 만큼의 성능과 유연성 이점을 얻을 수 있습니다.\n구분 Naive RAG Advanced RAG Modular RAG \n개념 기본 검색 및 생성 방식 최적화된 검색 및 후처리 적용 모듈화된 검색 및 생성 구조 \n검색 방식 단순 벡터 검색 하이브리드 검색(키워드+시맨틱) 다중 데이터 소스 및 적응형 검색 \n응답 생성 검색된 문서를 그대로 사용 필터링 및 요약 후 생성 최적화된 모듈 기반 응답 생성 \n정확성 검색 품질에 크게 의존 검색 후처리로 정확성 향상 정밀한 필터링 및 다중 데이터 활용 유연성 및 확장성 고정된 검색-생성 구조 제한적인 조정 가능 동적 워크플로우 및 확장 가능한 모듈 구조 \n적용 가능 분야 간단한 FAQ, 문서 검색 법률, 금융, 의료 도메인 적용 가능 실시간 데이터 활용 및 맞춤형 검색 가능 \n장점 ● 단순하고 이해하기 쉬운 기본 접근 방식 \n● Indexing, Pre-Retrieval, Post-Retrieval 등 고급 검색 기법을 도입하여 Naive RAG 보다 개선된 성능 \n● 모듈화된 아키텍처로 독립적인 관리가 가능 ● 양방향 프로세스로 조건부 처리, 사용자 개입 등 높은 유연성과 확장성을 제공 \n한계점 \n● 유사도 계산으로 인해 쿼리 이해도가 낮음 ● 검색 노이즈로 인해 불필요한 정보가 들어가게 됨 ● 고정된 선형 워크플로우로 인해 이전 결과를 수정할 수 없음 \n● 고정된 파이프라인 구조로 확장성 부족 ● 여전히 단방향 프로세스라는 구조적 한계를 내포 \n● 초기 설계 복잡 ● 유지보수 부담",
            "- Beyond the Training Set: Empowering LLMs to Seek Knowledge https://blog.boxcars.ai/p/beyond-the-training-set-empowering  - Evolution of RAGs: Naive RAG, Advanced RAG, and Modular RAG Architectures https://www.marktechpost.com/2024/04/01/evolution-of-rags-naive-rag-advanced-rag-and-modular-rag-architectures/  - Agentic Retrieval-Augmented Generation: A Survey on Agentic RAG https://arxiv.org/html/2501.09136v1   2번파트 - Modular RAG: Transforming RAG Systems into LEGO-like Reconfigurable Frameworks https://arxiv.org/pdf/2407.21059 - LLM RAG Paradigms: Naive RAG, Advanced RAG & Modular RAG https://medium.com/@drjulija/what-are-naive-rag-advanced-rag-modular-rag-paradigms-edff410c202e 3번 파트 - LLM RAG Paradigms: Naive RAG, Advanced RAG & Modular RAG https://medium.com/@drjulija/what-are-naive-rag-advanced-rag-modular-rag-paradigms-edff410c202e  - Retrieval-Augmented Generation for Large Language Models: A Survey https://arxiv.org/pdf/2312.10997v5 5번 파트",
            "2.4 주요 RAG 방법론 적용을 위한 비교 각 RAG 방법론은 특정 상황과 목적에 따라 장점과 한계가 다르므로, 적절한 방법론을 선택하고 적용하는 것이 중요합니다. Naive RAG는 가장 단순한 구조로 빠르게 구현할 수 있지만, 검색 노이즈와 정확도 문제를 가지고 있습니다. Advanced RAG는 검색 최적화 기술을 도입하여 정확도를 높이지만 여전히 고정된 워크플로우를 따릅니다. 반면, Modular RAG는 독립적인 모듈 기반 설계를 통해 유연성과 확장성을 극대화할 수 있어 다양한 조건에 맞춰 최적화가 가능합니다.  옵션 1.) 간단한 장단점 비교 RAG 유형 장점 단점 Naive RAG - 단순하고 이해하기 쉬운 기본 접근 방식 - 유사도 계산으로 인해 쿼리 이해도가 낮음 - 검색 노이즈로 인해 불필요한 정보가 들어가게 됨 - 고정된 선형 워크플로우로 인해 이전 결과를 수정할 수 없음\nAdvanced RAG - Indexing, Pre-Retrieval, Post-Retrieval 등 고급 검색 기법을 도입하여 Naive RAG 의 한계를 개선 - Naive RAG 와 같이, 여전히 단방향 프로세스라는 구조적 한계를 내포 \nModular RAG - 모듈화된 아키텍처로 독립적인 관리가 가능 - 양방향 프로세스로 조건부 처리, 사용자 개입 등 높은 유연성과 확장성을 제공 \n- 초기 설계 시 구현 복잡성이 높음 \n 옵션 2.) 상세 비교 비교 기준 Naive RAG Advanced RAG Modular RAG 검색 방식 (Search Method) • 단순 벡터 유사도 검색: 사용자의 질의를 임베딩으로 변환한 뒤 벡터 DB 등에서 유사도가 가장 높은 문서 조각들을 Top-N으로 검색합니다 ibm.com . 일반적으로 한 번의 질의로 얻은 결과만 사용하며, 키워드 매칭이나 임베딩 기반 검색 중 하나의 기법에 주로 의존합니다.",
            "한계 GraphRAG는 여러 분야에서 활용될 수 있지만, 그래프 구성, 검색, 구성, 생성 등 각 구성 요소와 시스템 전체의 효율성, 확장성, 신뢰성 측면에서 해결해야 할 과제들이 남아 있습니다. ● 그래프 구성: 작업에 맞는 그래프 구조 결정, 다양한 형식의 그래프 표현 방식 고려, 멀티모달 데이터 통합 문제 해결. ● 검색: 쿼리와 관련된 정보 검색, 검색 깊이 조정, 지식 충돌 해결. ● 구성: 그래프 크기 축소 및 노이즈 제거, 외부 지식을 이용한 그래프 보강. ● 생성: 그래프 구조 정보를 효과적으로 활용, 과학 그래프에서 정확한 구조 생성. ● 시스템 통합: 구성 요소 간의 원활한 상호 작용 보장 및 전체 시스템 최적화. ● 확장성: 데이터 증가에 따른 시스템 성능 유지. ● 신뢰성: ○ 개인 정보 보호: 민감한 데이터 보호를 위한 개인 정보 보호 기술 필요. ○ 설명 가능성: 추론 과정을 명확하게 설명하여 시스템에 대한 신뢰도 향상 . ● 평가: 구성 요소별 성능 평가, 종단 간 벤치마크, 작업 및 도메인별 평가, 신뢰성 벤치마크 필요. ● 새로운 응용 분야: 다양한 도메인에 GraphRAG를 적용하기 위한 맞춤형 전략 개발.  \n5.3 실제 기업 적용 사례(LinkedIn)   LinkedIn은 고객 서비스 기술 지원을 개선하기 위해 Knowledge Graph와 RAG(Retrieval-Augmented Generation)를 통합한 시스템을 개발했습니다. 기존의 벡터 기반 검색 RAG 시스템이 내부 구조와 이슈 간 관계를 무시하여 검색 정확도가 저하되는 문제가 있었습니다. 또한 임베딩 모델의 세분화 프로세스 중 콘텐츠가 단절되어 불완전한 답변이 발생하는 문제도 발생했습니다. 이를 해결하기 위해 Knowledge Graph를 통합한 GraphRAG를 도입하여, 과거 이슈의 구조와 상호 관계를 보존하면서 검색 정확도를 향상시켰습니다.",
            "특징 검색 단계의 정교한 처리를 통해 검색 정확도와 효율성을 향상시키지만, 여전히 복잡한 실제 응용 요구 사항을 충족하는 데 한계가 있습니다. \n한계 \n ● 고정적인 파이프라인 (Rigid Pipeline): 고급 RAG는 검색 전략을 향상 시켰지만, 전체적인 프로세스 구조는 여전히 고정된 방식을 유지하고 있습니다. 즉, 개별 검색 단계는 정교해졌지만 전체 시스템이 모듈화되지 않았으며, 유연하게 적응할 수 있는 구조가 부족합니다. ● 제한적인 동적 적응 (Limited Dynamic Adaptation): 고급 RAG는 검색 효율성을 높였지만, 반복적인 개선(iterative refinement)이나 다중 경로(multi-path) 처리를 완전히 지원하지 못합니다. 대부분의 질의 처리는 사전 정의된 방식에 따라 이루어져, 실시간으로 조정하거나 변화하는 정보 요구사항에 맞춰 즉각적으로 적응하기 어렵습니다.\n● 복잡한 사용자 맞춤 설정 (Complex Customization): 고급 RAG는 재랭킹 및 질의 변환 등의 개선된 기능을 제공하지만, 설정이 여전히 복잡하며, 개발자가 다양한 매개변수를 수동으로 조정해야 합니다. 또한, 모듈형 설계가 부족하여 시스템을 다시 구성하는 것이 어렵고 시간이 많이 소요됩니다.  \n2.4 Modular RAG (모듈형 RAG) 핵심 개념 Modular RAG는 기존 RAG의 한계를 극복하기 위해 개발된 유연하고 확장 가능한 프레임워크로, 독립적인 모듈과 특수 연산자로 구성된 구조를 통해 검색과 응답 생성의 제어력, 확장성, 효율성을 극대화합니다. 기존의 고정된 검색-생성 선형 파이프라인에서 벗어나, 라우팅, 스케줄링, 융합 메커니즘을 통합하는 고급 설계를 적용하여 보다 재구성이 용이한 시스템을 제공합니다.",
            "• 설계 난이도 및 초기 부담: 모듈을 다수 포함하다보니 워크플로 조정 등 시스템 설계가 어렵고 복잡합니다 arxiv.org . 구성요소 사이 인터페이스를 맞추고 전체 파이프라인을 조율해야 하므로 초기 개발 노력이 많이 들며, 최적화되지 않으면 모듈 간 통신 오버헤드로 응답 지연이 커질 수 있습니다. 또한 체계가 유연한 만큼 표준화된 구성보다는 사례별 맞춤 개발이 필요해 구현 난도가 높습니다. 다만 잘 구축하면 이러한 복잡성을 상쇄할 만큼의 성능과 유연성 이점을 얻을 수 있습니다.\n구분 Naive RAG Advanced RAG Modular RAG \n개념 기본 검색 및 생성 방식 최적화된 검색 및 후처리 적용 모듈화된 검색 및 생성 구조 \n검색 방식 단순 벡터 검색 하이브리드 검색(키워드+시맨틱) 다중 데이터 소스 및 적응형 검색 \n응답 생성 검색된 문서를 그대로 사용 필터링 및 요약 후 생성 최적화된 모듈 기반 응답 생성 \n정확성 검색 품질에 크게 의존 검색 후처리로 정확성 향상 정밀한 필터링 및 다중 데이터 활용 유연성 및 확장성 고정된 검색-생성 구조 제한적인 조정 가능 동적 워크플로우 및 확장 가능한 모듈 구조 \n적용 가능 분야 간단한 FAQ, 문서 검색 법률, 금융, 의료 도메인 적용 가능 실시간 데이터 활용 및 맞춤형 검색 가능 \n장점 ● 단순하고 이해하기 쉬운 기본 접근 방식 \n● Indexing, Pre-Retrieval, Post-Retrieval 등 고급 검색 기법을 도입하여 Naive RAG 보다 개선된 성능 \n● 모듈화된 아키텍처로 독립적인 관리가 가능 ● 양방향 프로세스로 조건부 처리, 사용자 개입 등 높은 유연성과 확장성을 제공 \n한계점 \n● 유사도 계산으로 인해 쿼리 이해도가 낮음 ● 검색 노이즈로 인해 불필요한 정보가 들어가게 됨 ● 고정된 선형 워크플로우로 인해 이전 결과를 수정할 수 없음 \n● 고정된 파이프라인 구조로 확장성 부족 ● 여전히 단방향 프로세스라는 구조적 한계를 내포 \n● 초기 설계 복잡 ● 유지보수 부담",
            "- Beyond the Training Set: Empowering LLMs to Seek Knowledge https://blog.boxcars.ai/p/beyond-the-training-set-empowering  - Evolution of RAGs: Naive RAG, Advanced RAG, and Modular RAG Architectures https://www.marktechpost.com/2024/04/01/evolution-of-rags-naive-rag-advanced-rag-and-modular-rag-architectures/  - Agentic Retrieval-Augmented Generation: A Survey on Agentic RAG https://arxiv.org/html/2501.09136v1   2번파트 - Modular RAG: Transforming RAG Systems into LEGO-like Reconfigurable Frameworks https://arxiv.org/pdf/2407.21059 - LLM RAG Paradigms: Naive RAG, Advanced RAG & Modular RAG https://medium.com/@drjulija/what-are-naive-rag-advanced-rag-modular-rag-paradigms-edff410c202e 3번 파트 - LLM RAG Paradigms: Naive RAG, Advanced RAG & Modular RAG https://medium.com/@drjulija/what-are-naive-rag-advanced-rag-modular-rag-paradigms-edff410c202e  - Retrieval-Augmented Generation for Large Language Models: A Survey https://arxiv.org/pdf/2312.10997v5 5번 파트",
            "2.4 주요 RAG 방법론 적용을 위한 비교 각 RAG 방법론은 특정 상황과 목적에 따라 장점과 한계가 다르므로, 적절한 방법론을 선택하고 적용하는 것이 중요합니다. Naive RAG는 가장 단순한 구조로 빠르게 구현할 수 있지만, 검색 노이즈와 정확도 문제를 가지고 있습니다. Advanced RAG는 검색 최적화 기술을 도입하여 정확도를 높이지만 여전히 고정된 워크플로우를 따릅니다. 반면, Modular RAG는 독립적인 모듈 기반 설계를 통해 유연성과 확장성을 극대화할 수 있어 다양한 조건에 맞춰 최적화가 가능합니다.  옵션 1.) 간단한 장단점 비교 RAG 유형 장점 단점 Naive RAG - 단순하고 이해하기 쉬운 기본 접근 방식 - 유사도 계산으로 인해 쿼리 이해도가 낮음 - 검색 노이즈로 인해 불필요한 정보가 들어가게 됨 - 고정된 선형 워크플로우로 인해 이전 결과를 수정할 수 없음\nAdvanced RAG - Indexing, Pre-Retrieval, Post-Retrieval 등 고급 검색 기법을 도입하여 Naive RAG 의 한계를 개선 - Naive RAG 와 같이, 여전히 단방향 프로세스라는 구조적 한계를 내포 \nModular RAG - 모듈화된 아키텍처로 독립적인 관리가 가능 - 양방향 프로세스로 조건부 처리, 사용자 개입 등 높은 유연성과 확장성을 제공 \n- 초기 설계 시 구현 복잡성이 높음 \n 옵션 2.) 상세 비교 비교 기준 Naive RAG Advanced RAG Modular RAG 검색 방식 (Search Method) • 단순 벡터 유사도 검색: 사용자의 질의를 임베딩으로 변환한 뒤 벡터 DB 등에서 유사도가 가장 높은 문서 조각들을 Top-N으로 검색합니다 ibm.com . 일반적으로 한 번의 질의로 얻은 결과만 사용하며, 키워드 매칭이나 임베딩 기반 검색 중 하나의 기법에 주로 의존합니다.",
            "한계 GraphRAG는 여러 분야에서 활용될 수 있지만, 그래프 구성, 검색, 구성, 생성 등 각 구성 요소와 시스템 전체의 효율성, 확장성, 신뢰성 측면에서 해결해야 할 과제들이 남아 있습니다. ● 그래프 구성: 작업에 맞는 그래프 구조 결정, 다양한 형식의 그래프 표현 방식 고려, 멀티모달 데이터 통합 문제 해결. ● 검색: 쿼리와 관련된 정보 검색, 검색 깊이 조정, 지식 충돌 해결. ● 구성: 그래프 크기 축소 및 노이즈 제거, 외부 지식을 이용한 그래프 보강. ● 생성: 그래프 구조 정보를 효과적으로 활용, 과학 그래프에서 정확한 구조 생성. ● 시스템 통합: 구성 요소 간의 원활한 상호 작용 보장 및 전체 시스템 최적화. ● 확장성: 데이터 증가에 따른 시스템 성능 유지. ● 신뢰성: ○ 개인 정보 보호: 민감한 데이터 보호를 위한 개인 정보 보호 기술 필요. ○ 설명 가능성: 추론 과정을 명확하게 설명하여 시스템에 대한 신뢰도 향상 . ● 평가: 구성 요소별 성능 평가, 종단 간 벤치마크, 작업 및 도메인별 평가, 신뢰성 벤치마크 필요. ● 새로운 응용 분야: 다양한 도메인에 GraphRAG를 적용하기 위한 맞춤형 전략 개발.  \n5.3 실제 기업 적용 사례(LinkedIn)   LinkedIn은 고객 서비스 기술 지원을 개선하기 위해 Knowledge Graph와 RAG(Retrieval-Augmented Generation)를 통합한 시스템을 개발했습니다. 기존의 벡터 기반 검색 RAG 시스템이 내부 구조와 이슈 간 관계를 무시하여 검색 정확도가 저하되는 문제가 있었습니다. 또한 임베딩 모델의 세분화 프로세스 중 콘텐츠가 단절되어 불완전한 답변이 발생하는 문제도 발생했습니다. 이를 해결하기 위해 Knowledge Graph를 통합한 GraphRAG를 도입하여, 과거 이슈의 구조와 상호 관계를 보존하면서 검색 정확도를 향상시켰습니다."
          ]
        },
        "response": {
          "0": "RAG의 한계는 다음과 같습니다.\n\n*   **단방향 프로세스:** 기존 RAG는 단방향 프로세스이며, 조건부 처리나 사용자 개입 등 유연성을 제공하지 못합니다.\n*   **검색 노이즈:** 유사도 계산으로 인해 쿼리 이해도가 낮아 불필요한 정보가 들어가게 됩니다.\n*   **고정된 선형 워크플로우:** 이전 결과를 수정할 수 없으며, 확장성이 부족합니다.\n*   **초기 설계 복잡성:** 모듈화된 아키텍처로 인해 유지보수 부담이 있습니다."
        },
        "reference": {
          "0": "RAG는 검색된 문서의 품질에 따라 답변의 정확성이 크게 좌우되며, 관련 없는 정보가 검색되면 환각(Hallucination) 현상이 발생할 수 있습니다. 또한, 실시간 정보나 최신 데이터를 반영하는 데 한계가 있을 수 있습니다."
        },
        "answer_relevancy": {
          "0": 0.8735530155148373
        },
        "faithfulness": {
          "0": 1.0
        },
        "context_recall": {
          "0": 1.0
        },
        "context_precision": {
          "0": 0.9999999999960001
        }
      },
      "average_scores": {
        "answer_relevancy": 0.8735530155148373,
        "faithfulness": 1.0,
        "context_recall": 1.0,
        "context_precision": 0.9999999999960001
      }
    }
  }
}